model:
  class_path: rslearn.train.lightning_module.RslearnLightningModule
  init_args:
    model:
      class_path: rslearn.models.multitask.MultiTaskModel
      init_args:
        encoder:
          - class_path: rslp.helios.model.Helios
            init_args:
              checkpoint_path: "{CHECKPOINT_PATH}"
              selector: ["encoder"]
              forward_kwargs:
                patch_size: {PATCH_SIZE}
        decoders:
          crop_type_mapping:
            - class_path: rslearn.models.pooling_decoder.PoolingDecoder
              init_args:
                in_channels: {ENCODER_EMBEDDING_SIZE}
                out_channels: 11
            - class_path: rslearn.train.tasks.classification.ClassificationHead
    lr: 0.0001
    plateau: true
    plateau_factor: 0.2
    plateau_patience: 2
    plateau_min_lr: 0
    plateau_cooldown: 10
data:
  class_path: rslearn.train.data_module.RslearnDataModule
  init_args:
    path: weka://dfive-default/rslearn-eai/datasets/crop_type_mapping/20250409_kenya_nandi
    inputs:
      sentinel2_0:
        data_type: "raster"
        layers: ["sentinel2"]
        bands: ["B02", "B03", "B04", "B08", "B05", "B06", "B07", "B8A", "B11", "B12", "B01", "B09"]
        passthrough: true
      sentinel2_1:
        data_type: "raster"
        layers: ["sentinel2.1"]
        bands: ["B02", "B03", "B04", "B08", "B05", "B06", "B07", "B8A", "B11", "B12", "B01", "B09"]
        passthrough: true
      sentinel2_2:
        data_type: "raster"
        layers: ["sentinel2.2"]
        bands: ["B02", "B03", "B04", "B08", "B05", "B06", "B07", "B8A", "B11", "B12", "B01", "B09"]
        passthrough: true
      sentinel2_3:
        data_type: "raster"
        layers: ["sentinel2.3"]
        bands: ["B02", "B03", "B04", "B08", "B05", "B06", "B07", "B8A", "B11", "B12", "B01", "B09"]
        passthrough: true
      sentinel2_4:
        data_type: "raster"
        layers: ["sentinel2.4"]
        bands: ["B02", "B03", "B04", "B08", "B05", "B06", "B07", "B8A", "B11", "B12", "B01", "B09"]
        passthrough: true
        dtype: FLOAT32
      sentinel2_5:
        data_type: "raster"
        layers: ["sentinel2.5"]
        bands: ["B02", "B03", "B04", "B08", "B05", "B06", "B07", "B8A", "B11", "B12", "B01", "B09"]
        passthrough: true
        dtype: FLOAT32
      label:
        data_type: "vector"
        layers: ["label"]
        is_target: true
    task:
      class_path: rslearn.train.tasks.multi_task.MultiTask
      init_args:
        tasks:
          crop_type_mapping:
            class_path: rslearn.train.tasks.classification.ClassificationTask
            init_args:
              property_name: "category"
              classes: ["Coffee", "Exoticetrees/forest", "Grassland", "Legumes","Maize", "Nativetrees/forest", "Sugarcane", "Tea", "Vegetables", "Water", "Built-up"]
              enable_f1_metric: true
              metric_kwargs:
                average: "micro"
        input_mapping:
          crop_type_mapping:
            label: "targets"
    batch_size: 16
    num_workers: 32
    default_config:
      transforms:
        - class_path: rslearn.train.transforms.concatenate.Concatenate
          init_args:
            selections:
              sentinel2_0: []
              sentinel2_1: []
              sentinel2_2: []
              sentinel2_3: []
              sentinel2_4: []
              sentinel2_5: []
            output_selector: sentinel2_l2a
        - class_path: rslp.helios.norm.HeliosNormalize
          init_args:
            config_fname: "/opt/helios/data/norm_configs/computed.json"
            band_names:
              sentinel2_l2a: ["B02", "B03", "B04", "B08", "B05", "B06", "B07", "B8A", "B11", "B12", "B01", "B09"]
    train_config:
      groups: ["groundtruth_random_split_window_32", "worldcover_window_32"]
      tags:
        split: "train"
    val_config:
      groups: ["groundtruth_random_split_window_32", "worldcover_window_32"]
      tags:
        split: "val"
    test_config:
      groups: ["groundtruth_random_split_window_32", "worldcover_window_32"]
      tags:
        split: "val"
trainer:
  max_epochs: 200
  callbacks:
    - class_path: lightning.pytorch.callbacks.LearningRateMonitor
      init_args:
        logging_interval: "epoch"
    - class_path: lightning.pytorch.callbacks.ModelCheckpoint
      init_args:
        save_top_k: 1
        save_last: true
        monitor: val_loss
        mode: min
    - class_path: rslearn.train.callbacks.freeze_unfreeze.FreezeUnfreeze
      init_args:
        module_selector: ["model", "encoder", 0]
        unfreeze_at_epoch: 2
rslp_project: placeholder
rslp_experiment: placeholder
