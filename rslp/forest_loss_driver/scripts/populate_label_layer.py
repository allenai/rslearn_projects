"""Populates a label layer for an rslearn dataset generated by extract_dataset.

extract_dataset is used in the inference pipeline to produce a dataset consisting of
windows that correspond to GLAD alerts. But it can also be used to create a dataset for
annotation e.g. in ES Studio. The initial dataset will be missing the label layer that
should contain the forest loss polygon with a placeholder category.

This script fills in that polygon in the label layer.
"""

import argparse
import json
import multiprocessing

import tqdm
from upath import UPath


def process_window(window_dir: UPath) -> None:
    """Populate the specified window with the label layer."""
    with (window_dir / "layers" / "mask_vector" / "data.geojson").open() as f:
        fc = json.load(f)
        assert len(fc["features"]) == 1
    fc["features"][0]["properties"]["old_label"] = "unknown"
    fc["features"][0]["properties"]["new_label"] = "unknown"
    dst_fname = window_dir / "layers" / "label" / "data.geojson"
    if dst_fname.exists():
        return
    dst_fname.parent.mkdir(parents=True)
    with dst_fname.open("w") as f:
        json.dump(fc, f)
    (dst_fname.parent / "completed").touch()


if __name__ == "__main__":
    multiprocessing.set_start_method("forkserver")

    parser = argparse.ArgumentParser()
    parser.add_argument("--ds_path", type=str, required=True)
    parser.add_argument("--workers", type=int, default=64)
    args = parser.parse_args()

    ds_path = UPath(args.ds_path)
    window_dirs = list(ds_path.glob("windows/*/*"))
    p = multiprocessing.Pool(args.workers)
    outputs = p.imap_unordered(process_window, window_dirs)
    for _ in tqdm.tqdm(outputs, total=len(window_dirs)):
        pass
    p.close()
