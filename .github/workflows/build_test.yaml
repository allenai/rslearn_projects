name: Build, Test, and Publish Docker Image

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  workflow_dispatch:
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  SERVICE_NAME: "rslearn_projects"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
        ghcr_docker_image: ${{ steps.image-names.outputs.ghcr_image_name }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=sha,format=long
            type=sha,format=short
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Cleanup disk space
        run: |
          sudo docker rmi $(docker image ls -aq) >/dev/null 2>&1 || true
          sudo docker image prune --all --force >/dev/null 2>&1 || true
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf /usr/local/share/boost

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # ============================================================================
      # SSH Multi-Key Setup for Private Repository Access
      # ============================================================================
      # The Docker build needs to clone from multiple private GitHub repositories:
      # - allenai/rslearn
      # - allenai/olmoearth_pretrain
      # - allenai/olmoearth_run
      #
      # PROBLEM: GitHub deploy keys are scoped to a single repository. We need
      # separate deploy keys for each repo. However, when SSH connects to github.com
      # with multiple keys loaded in the agent, it tries them in order. If the first
      # key authenticates successfully but lacks access to a specific repository,
      # GitHub returns "Repository not found" and SSH stops trying other keys.
      #
      # SOLUTION: We use SSH host aliases to route each repository to its specific key.
      # webfactory/ssh-agent sets up the SSH agent on the runner, but Docker builds
      # run in an isolated container that doesn't have access to the runner's SSH
      # config or git URL rewrites. So we must recreate this setup inside the container.

      - name: Setup SSH agent with deploy keys
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: |
            ${{ secrets.DEPLOY_KEY_FOR_OLMOEARTH_PRETRAIN_CLONE }}
            ${{ secrets.DEPLOY_KEY_FOR_OLMOEARTH_RUN_CLONE }}

      - name: Debug SSH keys
        run: |
          echo "=== SSH Agent Keys ==="
          ssh-add -L
          echo ""
          echo "=== SSH Config (if any) ==="
          cat ~/.ssh/config || echo "No SSH config found"
          echo ""
          echo "=== Git Config URL Rewrites ==="
          git config --global --get-regexp 'url\..*\.insteadof' || echo "No git URL rewrites found"

      # Prepare all SSH configuration files for Docker build
      # The SSH agent runs on the runner but we need actual key files and config
      # inside the Docker container. We pre-build everything here in the workflow
      # to keep the Dockerfile simple and free of CI-specific logic.
      - name: Prepare SSH keys for Docker build
        run: |
          mkdir -p .docker-ssh

          # Write SSH private keys
          echo "${{ secrets.DEPLOY_KEY_FOR_OLMOEARTH_PRETRAIN_CLONE }}" > .docker-ssh/olmoearth_pretrain_key
          echo "${{ secrets.DEPLOY_KEY_FOR_OLMOEARTH_RUN_CLONE }}" > .docker-ssh/olmoearth_run_key
          chmod 600 .docker-ssh/*_key

          # Create SSH config with host aliases
          cat > .docker-ssh/config << 'EOF'
          Host github-olmoearth-pretrain
            HostName github.com
            IdentityFile /root/.ssh/olmoearth_pretrain_key
            IdentitiesOnly yes

          Host github-olmoearth-run
            HostName github.com
            IdentityFile /root/.ssh/olmoearth_run_key
            IdentitiesOnly yes
          EOF

          # Create modified requirements files with host aliases
          sed 's|git@github\.com/allenai/olmoearth_pretrain|git@github-olmoearth-pretrain/allenai/olmoearth_pretrain|g' \
            requirements-olmoearth_pretrain.txt > .docker-ssh/requirements-olmoearth_pretrain.txt
          sed 's|git@github\.com/allenai/olmoearth_run|git@github-olmoearth-run/allenai/olmoearth_run|g' \
            requirements-olmoearth_run.txt > .docker-ssh/requirements-olmoearth_run.txt

## REMOVE BEFORE MERGE! ####
#      - name: Clone olmoearth repositories and update requirements-extra.txt
#        run: |
#          mkdir docker_build
#          git clone git@github.com:allenai/olmoearth_pretrain.git docker_build/olmoearth_pretrain
#          git -C docker_build/olmoearth_pretrain checkout 0cd82b4784bc2f246a23f6da98a9bab27761c1ba
#          echo "olmoearth_pretrain @ /opt/rslearn_projects/docker_build/olmoearth_pretrain/" >> requirements-extra.txt
#          git clone git@github.com:allenai/olmoearth_run.git docker_build/olmoearth_run
#          echo "olmoearth_run @ /opt/rslearn_projects/docker_build/olmoearth_run/" >> requirements-extra.txt
############################

      - name: Build and push Docker images with Bake
        id: build-push
        run: |
          docker buildx bake \
            --allow=ssh \
            --file ./docker-bake.hcl \
            --file ${{ steps.meta.outputs.bake-file }} \
            --set "*.cache-from=type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache" \
            --set "*.cache-to=type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache,mode=max" \
            --metadata-file /tmp/bake-metadata.json \
            --push

      - name: Store Image Names
        # We need the docker image name downstream in test & deploy. This saves the full docker image names to outputs
        id: image-names
        run: |-
          # Extract the digest for the 'full' target from bake metadata
          FULL_DIGEST=$(cat /tmp/bake-metadata.json | jq -r '.full."containerimage.digest"')
          GHCR_IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${FULL_DIGEST}"
          GHCR_IMAGE=`echo ${GHCR_IMAGE} | tr '[:upper:]' '[:lower:]'` # docker requires that all image names be lowercase
          echo "ghcr.io Docker image name is ${GHCR_IMAGE}"
          echo "ghcr_image_name=\"${GHCR_IMAGE}\"" >> $GITHUB_OUTPUT

  test:
    needs: build
    runs-on: ubuntu-latest-m
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
            registry: ${{ env.REGISTRY }}
            username: ${{ github.actor }}
            password: ${{ secrets.GITHUB_TOKEN }}

      - name: Cleanup disk space
        run: |
          sudo docker rmi $(docker image ls -aq) >/dev/null 2>&1 || true
          sudo docker image prune --all --force >/dev/null 2>&1 || true
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf /usr/local/share/boost

      - name: Pull the latest image
        run: |
          docker pull ${{ needs.build.outputs.ghcr_docker_image }}

      - name: Authenticate into gcp
        uses: "google-github-actions/auth@v2"
        with:
          credentials_json: ${{ secrets.GOOGLE_CREDENTIALS }}

      - name: Run unit tests
        run: |
          echo "Executing unit tests"
          docker run --rm \
            -e CI="true" \
            ${{ needs.build.outputs.ghcr_docker_image }} \
            pytest tests/unit -vv

      - name: Run integration tests
        run: |
          echo "Executing integration tests"
          docker run --rm \
            -e CI="true" \
            -e AWS_ACCESS_KEY_ID="${AWS_ACCESS_KEY_ID}" \
            -e AWS_SECRET_ACCESS_KEY="${AWS_SECRET_ACCESS_KEY}" \
            -e BEAKER_TOKEN="${BEAKER_TOKEN}" \
            -v ${{env.GOOGLE_GHA_CREDS_PATH}}:/tmp/gcp-credentials.json:ro \
            -e GOOGLE_APPLICATION_CREDENTIALS=/tmp/gcp-credentials.json \
            -e RSLP_BUCKET=rslearn-eai \
            -e RSLP_PREFIX=gs://rslearn-eai \
            -e BKT_PROJECT_ID=earthsystem-dev-c3po \
            -e BKT_BUCKET_NAME=rslp-tests \
            -e BKT_BIGTABLE_PROJECT_ID=earthsystem-dev-c3po \
            -e BKT_BIGTABLE_INSTANCE_ID=rslp-bigtable-test-instance \
            -e TEST_PUBSUB_PROJECT=earthsystem-dev-c3po \
            -e TEST_PUBSUB_TOPIC=rslearn_projects_test_topic \
            -e TEST_PUBSUB_SUBSCRIPTION=rslearn_projects_test_subscription \
            -e TEST_QUEUE_NAME=favyen/rslearn-projects-test-queue \
            ${{ needs.build.outputs.ghcr_docker_image }} \
            pytest tests/integration -vv --forked
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          BEAKER_TOKEN: ${{ secrets.BEAKER_TOKEN_2 }}

      - name: Clean up
        if: always()
        run: |
          docker image prune -f

  # test-slow:
  #   runs-on: GPU-Enabled-Runner
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v4
  #     - name: Log in to the Container registry
  #       uses: docker/login-action@v3
  #       with:
  #         registry: ${{ env.REGISTRY }}
  #         username: ${{ github.actor }}
  #         password: ${{ secrets.GITHUB_TOKEN }}

  #     - name: Log in to the Container registry
  #       uses: docker/login-action@v3
  #       with:
  #           registry: ${{ env.REGISTRY }}
  #           username: ${{ github.actor }}
  #           password: ${{ secrets.GITHUB_TOKEN }}

  #     - name: Cleanup disk space
  #       run: |
  #         sudo docker rmi $(docker image ls -aq) >/dev/null 2>&1 || true
  #         sudo docker image prune --all --force >/dev/null 2>&1 || true
  #         sudo rm -rf /usr/share/dotnet
  #         sudo rm -rf /opt/ghc
  #         sudo rm -rf /usr/local/share/boost

  #     - name: Build docker images
  #       run: |
  #         COMPOSE_DOCKER_CLI_BUILD=1 DOCKER_BUILDKIT=1 docker compose -f docker-compose.yaml build

  #     - name: Authenticate into gcp
  #       uses: "google-github-actions/auth@v2"
  #       with:
  #         credentials_json: ${{ secrets.GOOGLE_CREDENTIALS }}

  #     - name: Run tests with Docker Compose
  #       run: |
  #         docker run \
  #           --gpus all \
  #           --shm-size=15g \
  #           -e AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} \
  #           -e AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} \
  #           -v ${{env.GOOGLE_GHA_CREDS_PATH}}:/tmp/gcp-credentials.json:ro \
  #           -e GOOGLE_APPLICATION_CREDENTIALS=/tmp/gcp-credentials.json \
  #           -e RSLP_BUCKET=rslearn-eai \
  #           -e RSLP_PREFIX=gs://rslearn-eai \
  #           rslearn_projects-test pytest tests/integration_slow/ -vv

  #     - name: Clean up
  #       if: always()
  #       run: |
  #         docker compose -f docker-compose.yaml down
